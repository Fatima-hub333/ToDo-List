"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[826],{426:(n,e,r)=>{r.d(e,{Z:()=>g});var t=r(537),o=r.n(t),a=r(645),i=r.n(a),c=r(667),s=r.n(c),A=new URL(r(289),r.b),l=new URL(r(545),r.b),d=i()(o()),u=s()(A),p=s()(l);d.push([n.id,"* {\r\n  padding: 0;\r\n  margin: 0;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #fafafa;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-content: center;\r\n  background-color: white;\r\n  box-shadow: rgb(112, 109, 109) 2px 2px 5px 0.8px;\r\n  margin: 10vh 20vw;\r\n  width: 60%;\r\n}\r\n\r\n#uList {\r\n  margin: 2vh 1vw;\r\n  padding: 1vh 1vw;\r\n  list-style: none;\r\n}\r\n\r\n#uList li {\r\n  padding: 5px;\r\n}\r\n\r\n#uList li:not(:nth-child(1)) {\r\n  border-top: rgb(112, 109, 109) 1px solid;\r\n}\r\n\r\n#newTask {\r\n  font-style: italic;\r\n  border: none;\r\n  width: 98%;\r\n  padding: 5px;\r\n}\r\n\r\n.task-style {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.editableMode {\r\n  background-color: rgb(245, 245, 171);\r\n}\r\n\r\ninput[type=checkbox] {\r\n  margin-right: 5px;\r\n  color: black;\r\n  cursor: pointer;\r\n}\r\n\r\ninput[type=text] {\r\n  border: none;\r\n  background-color: transparent;\r\n  color: black;\r\n  padding: 4px;\r\n  font-size: medium;\r\n}\r\n\r\ninput[type=checkbox]:checked + input[type=text] {\r\n  color: #969696;\r\n  text-decoration: line-through;\r\n  font-style: italic;\r\n  margin-right: 5px;\r\n  pointer-events: all;\r\n}\r\n\r\n.menu,\r\n.menu::before {\r\n  font-size: x-large;\r\n  font-weight: bold;\r\n  background-image: url("+u+");\r\n  background-repeat: no-repeat;\r\n  color: transparent;\r\n  cursor: pointer;\r\n}\r\n\r\n.menu:active,\r\n.menu::after {\r\n  background-image: url("+p+");\r\n  background-repeat: no-repeat;\r\n  background-color: transparent;\r\n}\r\n\r\n.clear {\r\n  color: #969696;\r\n  padding: 3vh;\r\n  border: none;\r\n  width: 100%;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,qBAAqB;EACrB,uBAAuB;EACvB,gDAAgD;EAChD,iBAAiB;EACjB,UAAU;AACZ;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,UAAU;EACV,YAAY;AACd;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;EACjB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,kBAAkB;EAClB,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;;EAEE,kBAAkB;EAClB,iBAAiB;EACjB,yDAAuC;EACvC,4BAA4B;EAC5B,kBAAkB;EAClB,eAAe;AACjB;;AAEA;;EAEE,yDAA2C;EAC3C,4BAA4B;EAC5B,6BAA6B;AAC/B;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,YAAY;EACZ,WAAW;AACb",sourcesContent:["* {\r\n  padding: 0;\r\n  margin: 0;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #fafafa;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-content: center;\r\n  background-color: white;\r\n  box-shadow: rgb(112, 109, 109) 2px 2px 5px 0.8px;\r\n  margin: 10vh 20vw;\r\n  width: 60%;\r\n}\r\n\r\n#uList {\r\n  margin: 2vh 1vw;\r\n  padding: 1vh 1vw;\r\n  list-style: none;\r\n}\r\n\r\n#uList li {\r\n  padding: 5px;\r\n}\r\n\r\n#uList li:not(:nth-child(1)) {\r\n  border-top: rgb(112, 109, 109) 1px solid;\r\n}\r\n\r\n#newTask {\r\n  font-style: italic;\r\n  border: none;\r\n  width: 98%;\r\n  padding: 5px;\r\n}\r\n\r\n.task-style {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.editableMode {\r\n  background-color: rgb(245, 245, 171);\r\n}\r\n\r\ninput[type=checkbox] {\r\n  margin-right: 5px;\r\n  color: black;\r\n  cursor: pointer;\r\n}\r\n\r\ninput[type=text] {\r\n  border: none;\r\n  background-color: transparent;\r\n  color: black;\r\n  padding: 4px;\r\n  font-size: medium;\r\n}\r\n\r\ninput[type=checkbox]:checked + input[type=text] {\r\n  color: #969696;\r\n  text-decoration: line-through;\r\n  font-style: italic;\r\n  margin-right: 5px;\r\n  pointer-events: all;\r\n}\r\n\r\n.menu,\r\n.menu::before {\r\n  font-size: x-large;\r\n  font-weight: bold;\r\n  background-image: url(./icons/dots.svg);\r\n  background-repeat: no-repeat;\r\n  color: transparent;\r\n  cursor: pointer;\r\n}\r\n\r\n.menu:active,\r\n.menu::after {\r\n  background-image: url(./icons/trashcan.svg);\r\n  background-repeat: no-repeat;\r\n  background-color: transparent;\r\n}\r\n\r\n.clear {\r\n  color: #969696;\r\n  padding: 3vh;\r\n  border: none;\r\n  width: 100%;\r\n}\r\n"],sourceRoot:""}]);const g=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],A=t.base?s[0]+t.base:s[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=r(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var g=o(p,t);t.byIndex=c,e.splice(c,0,{identifier:d,updater:g,references:1})}i.push(d)}return i}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=r(a[i]);e[c].references--}for(var s=t(n,o),A=0;A<a.length;A++){var l=r(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},236:(n,e,r)=>{var t=r(379),o=r.n(t),a=r(795),i=r.n(a),c=r(569),s=r.n(c),A=r(565),l=r.n(A),d=r(216),u=r.n(d),p=r(589),g=r.n(p),f=r(426),m={};m.styleTagTransform=g(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=u(),o()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const E=document.getElementById("newTask"),C=()=>{const n=JSON.parse(localStorage.getItem("toDoList"))||[],e=document.getElementById("uList");document.querySelectorAll(".task-style").forEach((n=>n.remove())),n.forEach((n=>{const r=document.createElement("li");r.innerHTML=`\n    <span>\n      <input type="checkbox" id= "id-${n.index}" ${n.completed?"checked":""}>\n      <input type="text" id="tx-${n.index}" value= "${n.description}" disabled>\n    </span>\n    <i class= "menu" id="${n.index}">__</i>`,r.classList.add("task-style"),r.id=`li-${n.index}`,e.appendChild(r)})),document.querySelectorAll("input[type=checkbox]").forEach((e=>e.addEventListener("click",(()=>{const r=[...`${e.id}`].splice(3).pop()-1;e.checked?n[r].completed=!0:n[r].completed=!1,localStorage.setItem("toDoList",JSON.stringify(n))})))),document.querySelectorAll(".menu").forEach((e=>e.addEventListener("click",(e=>{document.getElementById(`li-${e.target.id}`).classList.toggle("editableMode");const r=e.target.id;if(n[r-1].completed){n.splice(r-1,1);for(let e=1;e<n.length+1;e+=1)n[e-1].index=e;localStorage.setItem("toDoList",JSON.stringify(n)),C()}const t=document.getElementById(`tx-${r}`);t.disabled=!1,document.addEventListener("keypress",(e=>{n[r-1].description=e.target.value,"Enter"===e.key&&(localStorage.setItem("toDoList",JSON.stringify(n)),t.disabled=!0,C())}))}))))},h=document.getElementById("newTask"),y=document.querySelector(".clear");h.addEventListener("keypress",(n=>{"Enter"===n.key&&((()=>{const n=JSON.parse(localStorage.getItem("toDoList"))||[];if((n=>{try{const n=window.localStorage,e="__storage_test__";return n.setItem(e,e),n.removeItem(e),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)}})()){const e={description:`${E.value}`,completed:!1,index:JSON.parse(`${n.length+1}`)};n.push(e),localStorage.setItem("toDoList",JSON.stringify(n))}})(),h.value=null,C())})),y.addEventListener("click",(()=>{const n=JSON.parse(localStorage.getItem("toDoList")).filter((n=>!n.completed));for(let e=1;e<n.length+1;e+=1)n[e-1].index=e;localStorage.setItem("toDoList",JSON.stringify(n)),C()})),window.addEventListener("load",C)},289:(n,e,r)=>{n.exports=r.p+"5a48332537a3d48d0bdb.svg"},545:(n,e,r)=>{n.exports=r.p+"692d4d4602924b0a7d7a.svg"}},n=>{n(n.s=236)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,